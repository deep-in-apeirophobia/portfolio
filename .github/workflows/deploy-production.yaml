name: Build and Deploy to K8s stagign

on:
  push:
    branches:
      - production

permissions:
  packages: write
  contents: read
  pull-requests: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}

jobs:
  build:
    name: Build and Push React production image to github
    runs-on: ubuntu-latest
    outputs:
      image_tags: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Log in to the Container registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,enable=true
            type=ref,event=branch
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          file: ./Dockerfile
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            SENTRY_AUTH_TOKEN=${{ env.SENTRY_AUTH_TOKEN }}
            SENTRY_ENVIRONMENT=production

  deploy:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set Kubeconfig
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}

      - name: Get Image Tag
        id: get_image_tag
        env: 
          IMAGE_TAGS: ${{ needs.build.outputs.image_tags }}
        run: |
          echo "image_tag=$(echo $IMAGE_TAGS | awk '{print $2}' | awk -F ':' '{print $2}')" >> "$GITHUB_OUTPUT"
 
      - name: Deploy to Kubernetes
        run: |
          kubectl config use-context portfolio-ctx
          helm upgrade -n portfolio -f ./k8s/values/prod.yaml --set image.tag="${{ steps.get_image_tag.outputs.image_tag }}"  atrin-portfolio ./k8s/portfolio/


